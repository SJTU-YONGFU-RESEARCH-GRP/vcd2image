[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vcd2image"
version = "0.1.0"
description = "Convert VCD files to timing diagram images via WaveJSON"
readme = "README.md"
license = {text = "CC-BY-4.0"}
requires-python = ">=3.10"
authors = [
    {name = "VCD2Image Team"}
]
maintainers = [
    {name = "VCD2Image Team"}
]
keywords = ["vcd", "wavedrom", "timing", "diagram", "verilog", "rtl"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Creative Commons Attribution 4.0 International",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
]
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "ruff>=0.6.0",
    "mypy>=1.10.0",
]
rendering = [
    "playwright>=1.45.0",
    "pillow>=10.0.0",
]

[project.scripts]
vcd2image = "vcd2image.cli.main:main"

[project.urls]
Homepage = "https://github.com/SJTU-YONGFU-RESEARCH-GRP/vcd2image"
Repository = "https://github.com/SJTU-YONGFU-RESEARCH-GRP/vcd2image.git"
Issues = "https://github.com/SJTU-YONGFU-RESEARCH-GRP/vcd2image/issues"
Changelog = "https://github.com/SJTU-YONGFU-RESEARCH-GRP/vcd2image/blob/main/CHANGELOG.md"
Documentation = "https://github.com/SJTU-YONGFU-RESEARCH-GRP/vcd2image#readme"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]  # assert false

[tool.mypy]
python_version = "3.12"
follow_imports = "silent"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "playwright",
    "playwright.async_api",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-x --tb=short --strict-markers"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "asyncio: marks tests as async (using pytest-asyncio)",
]
