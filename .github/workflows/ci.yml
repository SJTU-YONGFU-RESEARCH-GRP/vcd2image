name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        exclude:
          # Exclude Python 3.13 on Windows for now due to compatibility issues
          - os: windows-latest
            python-version: "3.13"
        include:
          # Add Python 3.13 on Ubuntu for comprehensive testing
          - os: ubuntu-latest
            python-version: "3.13"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libcairo2-dev libpango1.0-dev libgdk-pixbuf2.0-dev libffi-dev shared-mime-info

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,rendering]"

    - name: Code formatting check
      run: ruff format --check --diff .

    - name: Linting
      run: ruff check .

    - name: Type checking
      run: mypy src/

    - name: Unit tests with coverage
      run: pytest --cov=vcd2image --cov-report=term-missing --cov-report=xml

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Test examples (Ubuntu only)
      if: runner.os == 'Linux' && matrix.python-version == '3.12'
      run: |
        cd examples

        # Clean up any existing test files
        rm -f test_timer.json test_timer.png test_timer_full.png test_timer_auto.png
        rm -rf test_figures

        # Test VCD to JSON conversion
        python -m vcd2image.cli.main timer.vcd -o test_timer.json -s tb_timer/u_timer/clock tb_timer/u_timer/reset tb_timer/u_timer/pulse tb_timer/u_timer/count_eq11 tb_timer/u_timer/count

        # Test JSON to PNG conversion
        python -m vcd2image.cli.main test_timer.json -i test_timer.png

        # Test full pipeline
        python -m vcd2image.cli.main timer.vcd -s tb_timer/u_timer/clock tb_timer/u_timer/reset tb_timer/u_timer/pulse tb_timer/u_timer/count_eq11 tb_timer/u_timer/count --image test_timer_full.png

        # Test auto plotting (single figure)
        python -m vcd2image.cli.main timer.vcd --auto-plot --image test_timer_auto.png

        # Test auto plotting (multiple figures)
        python -m vcd2image.cli.main timer.vcd --auto-plot --plot-dir test_figures --plot-formats png

        # Verify outputs exist
        ls -la test_timer.json test_timer.png test_timer_full.png test_timer_auto.png test_figures/

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.12"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: python -m twine check dist/*

    - name: Publish to Test PyPI (on tags)
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        python -m twine upload --repository testpypi dist/*

    - name: Publish to PyPI (on release tags)
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*
